{
  // Place your [pkg] dev-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "React.memo Component": {
    "scope": "typescriptreact",
    "prefix": "rmc",
    "description": "New React.memo component.",
    "body": [
      "export const ${1:MyComponent} = React.memo(",
      "  /**",
      "   * ",
      "   */",
      "  function ${1:MyComponent}() {",
      "    ${0}",
      "    return (",
      "      <div>",
      "        <br />",
      "      </div>",
      "    );",
      "  },",
      ");",
      ""
    ]
  },
  "React.memo Component File": {
    "scope": "typescriptreact",
    "prefix": "rmcf",
    "description": "New React.memo component file.",
    "body": [
      "import React from \"react\";",
      "// Local",
      "// import clss from \"./${1:MyComponent}.module.scss\";",
      "",
      "export const ${1:MyComponent} = React.memo(",
      "  /**",
      "   * ",
      "   */",
      "  function ${1:MyComponent}() {",
      "    ${0}",
      "    return (",
      "      <div",
      "        // className={clss.root}",
      "      >",
      "        <br />",
      "      </div>",
      "    );",
      "  },",
      ");",
      ""
    ]
  },
  "SCSS File": {
    "scope": "scss",
    "prefix": "scssf",
    "description": "New SCSS file.",
    "body": [
      "// See /docs/STYLE.md for \"Root selector\" and \"Dynamic CSS\" strategies.",
      "// - Target global selectors with `:global(el or .class or #id)` anywhere.",
      "// - Use CSS vars given to any ancestor via `var(--my-var)`.",
      "",
      ".root {",
      "  margin: 0;${0}",
      "}",
      ""
    ]
  }
}
